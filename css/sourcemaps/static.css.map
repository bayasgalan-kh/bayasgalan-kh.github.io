{"version":3,"sources":["global-scss/vendor/priority-plus/_priority-plus.scss","static.css","global-scss/vendor/slick/_slick.scss","global-scss/helpers/mixins/_grid-columns.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","static-only/component-switcher/component-switcher.scss","global-scss/helpers/mixins/_grid-placement.scss","global-scss/helpers/mixins/_hover.scss","global-scss/helpers/mixins/_rem.scss","global-scss/helpers/mixins/_font-weight.scss"],"names":[],"mappings":"AAAA;EACE,kBAAA;ACCF;;ADEA;EACE,aAAA;EACA,kBAAA;EACA,UAAA;ACCF;;ADEA;EACE,kBAAA;EACA,MAAA;EACA,OAAA;EACA,uBAAA;EACA,oBAAA;EACA,kBAAA;ACCF;;ADEA;;EAEE,gBAAA;ACCF;;ADEA;EACE,cAAA;ACCF;;ADEA;EACE,aAAA;ACCF;;ADEA;EACE,YAAA;ACCF;;ADEA;EACE,aAAA;ACCF;;ADEA;EACE,aAAA;EACA,YAAA;ACCF;;ADEA;EACE,aAAA;EACA,cAAA;EACA,gBAAA;EACA,UAAA;EACA,SAAA;ACCF;;ADEA;EACE,cAAA;ACCF;;ADEA;EACE,aAAA;EACA,kBAAA;EACA,SAAA;EACA,QAAA;ACCF;;ADEA;EACE,cAAA;ACCF;;AClEA;EACE,cAAA;EACA,kBAAA;EACA,yBAAA;EAAA,iBAAA;EACA,mBAAA;EACA,wCAAA;ADqEF;;AClEA;;EAEE,+BAAA;ADqEF;;AClEA;EACE,kBAAA;EACA,gBAAA;EACA,cAAA;EACA,SAAA;EACA,UAAA;ADqEF;ACnEE;EACE,aAAA;ADqEJ;AClEE;EACE,YAAA;ADoEJ;;AChEA;EAEE,kBAAA;EACA,OAAA;EACA,MAAA;EACA,cAAA;EACA,iBAAA;EACA,kBAAA;ADkEF;AChEE;EACE,kBAAA;ADkEJ;;AC9DA;EACE,aAAA;EACA,WAAA;EACA,YAAA;EACA,eAAA;ADiEF;AC/DE;EACE,cAAA;ADiEJ;AC9DE;EACE,kBAAA;ADgEJ;AC7DE;EACE,cAAA;EACA,YAAA;AD+DJ;;AC3DA;EACE,wBAAA;AD8DF;;AC1DA;EACE,kBAAA;AD6DF;AC3DE;EACE,mBAAA;AD6DJ;;AEvGA;EACE,aAAA;EACA,4HAAA;AF0GF;AG1EI;EDlCJ;IAKI,4HAAA;EF2GF;AACF;;AI5IA;EC4CE,iBAAA;ED1CA,kBAAA;EACA,gBAAA;AJ+IF;AI7IE;EACE,aAAA;EACA,sBAAA;EACA,oBAAA;EACA,kBAAA;EACA,MAAA;EACA,OAAA;EACA,UAAA;EACA,4BAAA;EACA,6BAAA;EACA,aAAA;AJ+IJ;AMlIE;EFVI,wBAAA;EACA,UAAA;AJ+IN;AI5II;EACE,oBAAA;EACA,mBAAA;EACA,kBAAA;EACA,YAAA;EACA,yBAAA;EACA,WAAA;EGgEE,eAAA;EAGA,mBAAA;ECpBN,gBAHW;EJzCP,qBAAA;EACA,mBAAA;EACA,SAAA;EACA,eAAA;EACA,gBAAA;AJ+IN;AI7IM;EACE,yBAxCgB;EAyChB,eAAA;AJ+IR;AI7IQ;EACE,WAAA;EACA,kBAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,mBAjDc;AJgMxB;AI5IQ;EACE,WAAA;EACA,qBAAA;EACA,kBAAA;EACA,QAAA;EACA,YAAA;EACA,QAAA;EACA,SAAA;EACA,mBAAA;EACA,2BAAA;EACA,sDAAA;EACA,2BAAA;AJ8IV;AM/KE;EFwCQ,yBAAA;EACA,8CAAA;AJ0IV;AIjII;EACE,kBAAA;EACA,kBAAA;EACA,UAAA;EACA,WAAA;AJmIN;AIhII;EACE,mBAAA;EACA,UAAA;EACA,UAAA;AJkIN","file":"../static.css","sourcesContent":[".p-plus-container {\n  position: relative;\n}\n\n.p-plus {\n  display: flex;\n  position: relative;\n  z-index: 1;\n}\n\n.p-plus--clone {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: calc(100% - 5px);\n  pointer-events: none;\n  visibility: hidden;\n}\n\n.p-plus--clone,\n.p-plus--clone .p-plus__primary-wrapper {\n  overflow: hidden;\n}\n\n.p-plus--is-showing-overflow .p-plus__overflow {\n  display: block;\n}\n\n.p-plus:not(.p-plus--is-showing-toggle) .p-plus__toggle-btn {\n  display: none;\n}\n\n.p-plus--is-hiding-primary .p-plus__toggle-btn {\n  flex-grow: 1;\n}\n\n.p-plus--is-hiding-primary .p-plus__primary-wrapper {\n  display: none;\n}\n\n.p-plus__primary-wrapper {\n  display: flex;\n  flex-grow: 1;\n}\n\n.p-plus__primary {\n  display: flex;\n  flex: 1 0 auto;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.p-plus__primary > li {\n  flex: 1 0 auto;\n}\n\n.p-plus__overflow {\n  display: none;\n  position: absolute;\n  top: 100%;\n  right: 0;\n}\n\n.p-plus__toggle-btn {\n  flex-shrink: 0;\n}\n",".p-plus-container {\n  position: relative;\n}\n\n.p-plus {\n  display: flex;\n  position: relative;\n  z-index: 1;\n}\n\n.p-plus--clone {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: calc(100% - 5px);\n  pointer-events: none;\n  visibility: hidden;\n}\n\n.p-plus--clone,\n.p-plus--clone .p-plus__primary-wrapper {\n  overflow: hidden;\n}\n\n.p-plus--is-showing-overflow .p-plus__overflow {\n  display: block;\n}\n\n.p-plus:not(.p-plus--is-showing-toggle) .p-plus__toggle-btn {\n  display: none;\n}\n\n.p-plus--is-hiding-primary .p-plus__toggle-btn {\n  flex-grow: 1;\n}\n\n.p-plus--is-hiding-primary .p-plus__primary-wrapper {\n  display: none;\n}\n\n.p-plus__primary-wrapper {\n  display: flex;\n  flex-grow: 1;\n}\n\n.p-plus__primary {\n  display: flex;\n  flex: 1 0 auto;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.p-plus__primary > li {\n  flex: 1 0 auto;\n}\n\n.p-plus__overflow {\n  display: none;\n  position: absolute;\n  top: 100%;\n  right: 0;\n}\n\n.p-plus__toggle-btn {\n  flex-shrink: 0;\n}\n\n.slick-slider {\n  display: block;\n  position: relative;\n  user-select: none;\n  touch-action: pan-y;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.slick-track,\n.slick-list {\n  transform: translate3d(0, 0, 0);\n}\n\n.slick-list {\n  position: relative;\n  overflow: hidden;\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.slick-list:focus {\n  outline: none;\n}\n.slick-list.dragging {\n  cursor: hand;\n}\n\n.slick-track {\n  position: relative;\n  left: 0;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n.slick-loading .slick-track {\n  visibility: hidden;\n}\n\n.slick-slide {\n  display: none;\n  float: left;\n  height: 100%;\n  min-height: 1px;\n}\n.slick-initialized .slick-slide {\n  display: block;\n}\n.slick-loading .slick-slide {\n  visibility: hidden;\n}\n.slick-vertical .slick-slide {\n  display: block;\n  height: auto;\n}\n\n.slick-hidden {\n  display: none !important;\n}\n\n.slider {\n  visibility: hidden;\n}\n.slider.slick-initialized {\n  visibility: visible;\n}\n\n.component-switcher-components {\n  display: grid;\n  grid-template-columns: [full-start] minmax(20px, 1fr) [main-start] minmax(0, 1535px) [main-end] minmax(20px, 1fr) [full-end];\n}\n@media (min-width: 1024px) {\n  .component-switcher-components {\n    grid-template-columns: [full-start] minmax(30px, 1fr) [main-start] minmax(0, 1535px) [main-end] minmax(30px, 1fr) [full-end];\n  }\n}\n\n.component-switcher {\n  grid-column: full;\n  position: relative;\n  overflow: hidden;\n}\n.component-switcher-selector {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  transform: translateX(-100%);\n  transition: ease-in-out 0.25s;\n  opacity: 0.75;\n}\n.component-switcher-selector:active, .component-switcher-selector:focus, .component-switcher-selector:hover, .component-switcher-selector.-focused {\n  transform: translateX(0);\n  opacity: 1;\n}\n.component-switcher-selector > a {\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  height: 40px;\n  background-color: #ed6954;\n  color: #fff;\n  font-size: 14px;\n  font-size: 0.875rem;\n  font-weight: 700;\n  text-decoration: none;\n  white-space: nowrap;\n  border: 0;\n  padding: 0 10px;\n  transition: none;\n}\n.component-switcher-selector > a.-active {\n  background-color: #de3217;\n  cursor: default;\n}\n.component-switcher-selector > a.-active::before {\n  content: \"\";\n  position: absolute;\n  right: -15px;\n  width: 15px;\n  height: 100%;\n  background: #de3217;\n}\n.component-switcher-selector > a.-active::after {\n  content: \"\";\n  display: inline-block;\n  position: absolute;\n  top: 50%;\n  right: -10px;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 4px 0 4px 6px;\n  border-color: transparent transparent transparent #fff;\n  transform: translateY(-50%);\n}\n.component-switcher-selector > a:not(.-active):active, .component-switcher-selector > a:not(.-active):focus, .component-switcher-selector > a:not(.-active):hover, .component-switcher-selector > a:not(.-active).-focused {\n  background-color: #b02812;\n  transition: background-color 0.25s ease-in-out;\n}\n.component-switcher-components > *:not([data-cs-visibility=show]) {\n  position: absolute;\n  visibility: hidden;\n  opacity: 0;\n  z-index: -1;\n}\n.component-switcher-components [data-cs-visibility=show] {\n  visibility: visible;\n  opacity: 1;\n  z-index: 1;\n}",".slick-slider {\n  display: block;\n  position: relative;\n  user-select: none;\n  touch-action: pan-y;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.slick-track,\n.slick-list {\n  transform: translate3d(0, 0, 0);\n}\n\n.slick-list {\n  position: relative;\n  overflow: hidden;\n  display: block;\n  margin: 0;\n  padding: 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &.dragging {\n    cursor: hand;\n  }\n}\n\n.slick-track {\n  // @include clearfix-micro;\n  position: relative;\n  left: 0;\n  top: 0;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n\n  .slick-loading & {\n    visibility: hidden;\n  }\n}\n\n.slick-slide {\n  display: none;\n  float: left;\n  height: 100%;\n  min-height: 1px;\n\n  .slick-initialized & {\n    display: block;\n  }\n\n  .slick-loading & {\n    visibility: hidden;\n  }\n\n  .slick-vertical & {\n    display: block;\n    height: auto;\n  }\n}\n\n.slick-hidden {\n  display: none !important; // sass-lint:disable-line no-important\n}\n\n// stop slick FOUC\n.slider {\n  visibility: hidden;\n\n  &.slick-initialized {\n    visibility: visible;\n  }\n}\n","// Grid Columns\n//\n// Main CSS grid layout\n//\n// Definition:\n// %grid-columns {\n//   display: grid;\n//   grid-template-columns: [full-start] minmax(20px, 1fr) [main-start] minmax(0, $inner-max-width) [main-end] minmax(20px, 1fr) [full-end];\n//   @include from(10) {\n//     grid-template-columns: [full-start] minmax(40px, 1fr) [main-start] minmax(0, $inner-max-width) [main-end] minmax(40px, 1fr) [full-end];\n//   }\n// }\n//\n// Usage:\n// .sample {\n//   @extend grid-columns;\n// }\n//\n// Compiled:\n// .sample {\n//   display: grid;\n//   grid-template-columns: [full-start] minmax(20px, 1fr) [main-start] minmax(0, 1500px) [main-end] minmax(20px, 1fr) [full-end];\n// }\n// @media (min-width: 1000px) {\n//   .sample {\n//     grid-template-columns: [full-start] minmax(40px, 1fr) [main-start] minmax(0, 1500px) [main-end] minmax(40px, 1fr) [full-end];\n//   }\n// }\n//\n// Styleguide Sass Mixins.Grid Columns\n%grid-columns {\n  display: grid;\n  grid-template-columns: [full-start] minmax($mobile-padding, 1fr) [main-start] minmax(0, $inner-max-width) [main-end] minmax($mobile-padding, 1fr) [full-end];\n\n  @include from(10) {\n    grid-template-columns: [full-start] minmax($desktop-padding, 1fr) [main-start] minmax(0, $inner-max-width) [main-end] minmax($desktop-padding, 1fr) [full-end];\n  }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","// Component Switcher\n$component-switcher-bg: primary-color(red, shade1);\n\n.component-switcher {\n  @include grid-placement(full-bleed);\n  position: relative;\n  overflow: hidden;\n\n  &-selector {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 5;\n    transform: translateX(-100%);\n    transition: $te $ts;\n    opacity: .75;\n\n    @include hover {\n      transform: translateX(0);\n      opacity: 1;\n    }\n\n    > a {\n      display: inline-flex;\n      align-items: center;\n      position: relative;\n      height: 40px;\n      background-color: lighten($component-switcher-bg, 15%);\n      color: primary-color(white);\n      @include rem(font-size, 14px);\n      @include font-weight(bold);\n      text-decoration: none;\n      white-space: nowrap;\n      border: 0;\n      padding: 0 10px;\n      transition: none;\n\n      &.-active {\n        background-color: $component-switcher-bg;\n        cursor: default;\n\n        &::before {\n          content: '';\n          position: absolute;\n          right: -15px;\n          width: 15px;\n          height: 100%;\n          background: $component-switcher-bg;\n        }\n\n        &::after {\n          content: '';\n          display: inline-block;\n          position: absolute;\n          top: 50%;\n          right: -10px;\n          width: 0;\n          height: 0;\n          border-style: solid;\n          border-width: 4px 0 4px 6px;\n          border-color: transparent transparent transparent primary-color(white);\n          transform: translateY(-50%);\n        }\n      }\n\n      &:not(.-active) {\n\n        @include hover {\n          background-color: darken($component-switcher-bg, 10%);\n          transition: background-color $ts $te;\n        }\n      }\n    }\n  }\n\n  &-components {\n    @extend %grid-columns;\n\n    > *:not([data-cs-visibility='show']) {\n      position: absolute;\n      visibility: hidden;\n      opacity: 0;\n      z-index: -1;\n    }\n\n    [data-cs-visibility='show'] {\n      visibility: visible;\n      opacity: 1;\n      z-index: 1;\n    }\n  }\n}\n","@use \"sass:list\";\n\n// Grid Placement\n//\n// Specifies grid placement for the grid defined in src/global-scss/_layout.scss\n//\n// $type = contrained - Grid type (possible values: contrained, full-bleed, left-bleed, right-bleed)\n// $max-width = null - Inner max-width to be used if the desired max-width is LESS THAN the $inner-max-width declaredin sec/global-scss/_settings.scss\n//\n// Definition:\n// $grid-type: (\n//   constrained: main,\n//   full-bleed:  full,\n//   left-bleed:  full / main,\n//   right-bleed: main / full\n// );\n// @mixin grid-placement($type: constrained, $max-width: null) {\n//   grid-column: map-get($grid-type, $type);\n//   @if $max-width {\n//     width: 100%;\n//     max-width: $max-width;\n//     margin-left: auto;\n//     margin-right: auto;\n//   }\n// }\n//\n// Usage:\n// .component {\n//   @include grid-placement;\n// }\n//\n// Compiled:\n// .component {\n//   grid-column: main;\n// }\n//\n// Styleguide Sass Mixins.Grid Placement\n\n// Grid type variables\n$grid-type: (\n  constrained: main,\n  full-bleed:  full,\n  left-bleed:  list.slash(full, main),\n  right-bleed: list.slash(main, full)\n);\n\n@mixin grid-placement($type: constrained, $max-width: null) {\n  grid-column: map-get($grid-type, $type);\n\n  @if $max-width {\n    width: 100%;\n    max-width: $max-width;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n","// Hover\n//\n// Add styles for :hover, :focus, :active and .-focused\n//\n// Definition:\n// @mixin hover {\n//   &:active,\n//   &:focus,\n//   &:hover,\n//   &.-focused {\n//     @content;\n//   }\n// }\n//\n// Usage:\n// .sample {\n//   @include hover {\n//     color: red;\n//   }\n// }\n//\n// Compiled:\n// .sample:active,\n// .sample:focus,\n// .sample:hover,\n// .sample.-focused {\n//   color: red;\n// }\n//\n// Styleguide Sass Mixins.Eyebrow Text\n@mixin hover {\n  &:active,\n  &:focus,\n  &:hover,\n  &.-focused {\n    @content;\n  }\n}\n","@use \"sass:math\";\n\n//\n// Rem Mixin Stuff\n//\n$rem-baseline: 16px !default;\n$rem-fallback: true !default;\n$rem-px-only: false !default;\n\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n@function rem-separator($list) {\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, math.div($value, 1rem) * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, math.div($value, math.div($rem-baseline, 1rem)), $separator);\n    } @else if type-of($value) == 'list' {\n      $result: append($result, rem-convert($to, $value...), $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return $result;\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n// Rem Units\n//\n// Converts a pixel value to rem and includes a pixel value as a fallback\n//\n// $properties = null - Properties to convert to rem\n// $values   = null - Pixel values to convert\n//\n// Definition:\n// @mixin rem($properties, $values...) {\n//   @if type-of($properties) == \"map\" {\n//     @each $property, $values in $properties {\n//       @include rem($property, $values...);\n//     }\n//   } @else {\n//     @each $property in $properties {\n//       @if $rem-fallback or $rem-px-only {\n//         #{$property}: rem-convert(px, $values...);\n//       }\n//       @if not $rem-px-only {\n//         #{$property}: rem-convert(rem, $values...);\n//       }\n//     }\n//   }\n// }\n//\n// Usage:\n// .sample {\n//   @include rem(font-size, 16px);\n// }\n//\n// Compiled:\n// .sample {\n//   font-size: 16px;\n//   font-size: 1rem;\n// }\n//\n// Styleguide Sass Mixins.Rem Units\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property, $values in $properties {\n      @include rem($property, $values...);\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n","// Font Weight\n//\n// Compiles a string font-weight to it's associated integer font weight\n//\n// $weight = null - Desired font weight as a string\n//\n// Definition:\n// @mixin font-weight($weight) {\n//   $weights: (\n//     thin: 100,\n//     extra-light: 200,\n//     ultra-light: 200,\n//     light: 300,\n//     normal: 400,\n//     book: 400,\n//     regular: 400,\n//     roman: 400,\n//     medium: 500,\n//     semi-bold: 600,\n//     demibold: 600,\n//     demi-bold: 600,\n//     bold: 700,\n//     extra-bold: 800,\n//     ultra-bold: 900,\n//     heavy: 900,\n//     black: 900,\n//     ultra: 900,\n//     ultra-black: 900,\n//     extra-ultra: 900\n//   );\n//   $output: $weight;\n//   @if map-has-key($weights, $weight) {\n//     $output: map-get($weights, $weight);\n//   }\n//   font-weight: $output;\n// }\n//\n// Usage:\n// .sample {\n//   @include font-weight(medium);\n// }\n//\n// Compiled:\n// .sample {\n//   font-weight: 500;\n// }\n//\n// Styleguide Sass Mixins.Font Weight\n@mixin font-weight($weight) {\n  $weights: (\n    thin: 100,\n    extra-light: 200,\n    ultra-light: 200,\n    light: 300,\n    normal: 400,\n    book: 400,\n    regular: 400,\n    roman: 400,\n    medium: 500,\n    semibold: 600,\n    semi-bold: 600,\n    demibold: 600,\n    demi-bold: 600,\n    bold: 700,\n    extra-bold: 800,\n    ultra-bold: 900,\n    heavy: 900,\n    black: 900,\n    ultra: 900,\n    ultra-black: 900,\n    extra-ultra: 900\n  );\n\n  $output: $weight;\n  @if map-has-key($weights, $weight) {\n    $output: map-get($weights, $weight);\n  }\n\n  font-weight: $output;\n}\n"]}